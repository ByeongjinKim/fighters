using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;

//-----------------------------------------------------------------------------------------------------------------------------------
// 메세지 큐 정보를 처리하기 위한 함수
//-----------------------------------------------------------------------------------------------------------------------------------
public class CMessageQueue : MonoBehaviour
{
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    [System.Serializable]
    public class tagData
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        public List<tagMessageQueue>	Messages	= new List<tagMessageQueue>();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    };
    public tagData		data		= new tagData();

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	protected CApp		app			= (null);
	protected CPlay		play		= (null);

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	void OnEnable()
	{
		(this.app)		= (CApp.This);
		(this.play)		= (CPlay.This);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Process()
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        while( (data.Messages.Count)>(0) )
        {
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
            tagMessageQueue message = (data.Messages[0] as tagMessageQueue);
			if( (message.delay)>(0) || (message.skip)>(0) )
			{
				break;
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (data.Messages.Count)>(0) )
			{
				data.Messages.RemoveAt(0);
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (message)!=(null) && (message.CallBack)!=(null) )
			{
				message.CallBack( (message.wParam), (message.lParam) );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
        }

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagMessageQueue message0 in data.Messages )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (message0.delay)>(0) )
			{
				if( (Time.timeScale)!=(1) || (Time.unscaledDeltaTime)==(Time.deltaTime) )
				{
					(message0.delay) -= (Time.unscaledDeltaTime);
				}
				else
				{
					(message0.delay) -= (Time.deltaTime);
				}
			}

			/*
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( message0.skip )
			{
				(message0.skip) = (false);
			}
			*/

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	void OnGUI()
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		bool isSort = (false);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagMessageQueue message in data.Messages )
		{
			if( (message.skip)>(0) )
			{
				(message.skip) -= (1);
				(isSort) = (true);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( isSort )
		{
			Sort();
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메세지를 전송하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public tagMessageQueue ON( WM iMessage, object wParam, object lParam, float delay=(0f), Action<object, object> func=(null), int skip=(0) )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( (wParam)==(null) ) return;	//(NULL)값을 허용함
//		if( (lParam)==(null) ) return;	//(NULL)값을 허용함
//		if( (func)==(null) ) return;	//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        tagMessageQueue		message		= new tagMessageQueue();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		(message.name)			= iMessage.ToString();
		(message.iMessage)		= (iMessage);
        (message.wParam)		= (wParam);
        (message.lParam)		= (lParam);
        (message.delay)			= (delay);
		(message.skip)			= (skip);
		(message.CallBack)		= (func);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        data.Messages.Add( message );
        Sort();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (message);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메세지를 전송하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public tagMessageQueue ON( Action<object, object> func, object wParam, object lParam, float delay=(0f), int skip=(0) )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return ON( (WM.CALL), (wParam), (lParam), (delay), (func), (skip) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메세지를 전송하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public void ON( Action<object, object> func, float delay=(0f), int skip=(0) )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		ON( (WM.CALL), (null), (null), (delay), (func), (skip) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메세지를 전송하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public void ON( tagCallback callback, float delay=(0f) )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (callback)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		ON( (WM.CALL), (callback.wParam), (callback.lParam), (delay), (callback.func) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public tagMessageQueue ONAndSkip( Action<object, object> func, object wParam=null, object lParam=null, float delay=0f )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (func)==(null) ) return null;
//		if( (wParam)==(null) ) return null;	//(NULL)값을 허용함
//		if( (lParam)==(null) ) return null;	//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return ON( (func), (wParam), (lParam), (delay), (1) );
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public tagMessageQueue ONAndSkip( Action<object, object> func, float delay )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (func)==(null) ) return null;
//		if( (wParam)==(null) ) return null;	//(NULL)값을 허용함
//		if( (lParam)==(null) ) return null;	//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return ON( (func), (null), (null), (delay), (1) );
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 실행 순서순으로 정렬하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    void Sort()
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		SortSkip();
		SortDelay();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	void SortSkip()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        tagMessageQueue message1 = (null);
        tagMessageQueue message2 = (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        for( int i=0; i<(data.Messages.Count-1); i++ )
        {
            for( int j=(i+1); j<(data.Messages.Count); j++ )
            {
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
                (message1)  = (data.Messages[i] as tagMessageQueue);
                (message2)  = (data.Messages[j] as tagMessageQueue);

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				if( (message1.skip)>(message2.skip) )
				{
					(data.Messages[i])  = (message2);
					(data.Messages[j])  = (message1);
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
            }
        }

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	void SortDelay()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        tagMessageQueue message1 = (null);
        tagMessageQueue message2 = (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        for( int i=0; i<(data.Messages.Count-1); i++ )
        {
            for( int j=(i+1); j<(data.Messages.Count); j++ )
            {
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
                (message1)  = (data.Messages[i] as tagMessageQueue);
                (message2)  = (data.Messages[j] as tagMessageQueue);

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				if( (message1.delay)>(message2.delay) )
				{
					(data.Messages[i])  = (message2);
					(data.Messages[j])  = (message1);
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
            }
        }

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메세지를 취소하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Cancel( WM iMessage, Action<object, object> func=(null), object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		tagMessageQueue		message	= (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		for( int i=0; i<(data.Messages.Count); i++ )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(message)	= data.Messages[i];

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (message.iMessage)==(iMessage) )
			{
				if( (func)==(null) || (message.CallBack)==(func) )
				{
					if( (wParam)!=(null) && (wParam)!=(message.wParam) ) continue;
					if( (lParam)!=(null) && (lParam)!=(message.lParam) ) continue;
					data.Messages.Remove( message );
					(i)	--;
				}
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메세지를 취소하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Cancel( Action<object, object> func=(null), object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Cancel( (WM.CALL), (func), (wParam), (lParam) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool Is( WM iMessage, Action<object, object> func=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagMessageQueue message in data.Messages )
		{
			if( (message.iMessage)==(iMessage) && (message.CallBack)==(func) )
			{
				return true;
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool Is( WM iMessage, object wParam, object lParam )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagMessageQueue message in data.Messages )
		{
			if( (message.iMessage)==(iMessage) && (message.wParam)==(wParam) && (message.lParam)==(lParam) )
			{
				return true;
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool Is( Action<object, object> func=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagMessageQueue message in data.Messages )
		{
			if( (message.iMessage)==(WM.CALL) && (message.CallBack)==(func) )
			{
				return true;
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
}

//-----------------------------------------------------------------------------------------------------------------------------------
// -
//-----------------------------------------------------------------------------------------------------------------------------------